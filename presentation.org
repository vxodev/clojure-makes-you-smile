* ( Clojure )




[[file:pics/lisp_cycles.png]]

https://github.com/vxodev/clojure-makes-you-smile

* ( about Me )


- Gears of Leo, 2016
  - HRM Software, 2013
    - Boss Media, 2008
      - Epireal, 2005
        - WM-data, 1999
          - Lund
          
- Java (done it all...)
- Ruby (2001)
- Scala, Haskell, Python, Erlang, Javascript ...

* ( why Clojure )


#+BEGIN_QUOTE
"Lisp is worth learning for the profound enlightenment experience you will have
when you finally get it; that experience will make you a better programmer for
the rest of your days, even if you never actually use Lisp itself a lot."
-- Eric Raymond, "How to Become a Hacker"
#+END_QUOTE

[[file:pics/lisp.jpg]]

( LISP is good for you )\trade


* ( what makes clojure Great? )

** Rich Hickey!
** Immutability
** Explicit State
** Code is data
** Java interop
** Clojurescript
** The community
** Developer experience (warm and fuzzy feeling)

* ( what is Clojure? )

[[file:pics/clojure.png]]

- En LISP på JVM:en, CLR och Javascript
  
- Funktionellt och dynamiskt typat
  
- Skapades av Rich Hickey. Första releasen 2009

* ( LISP - Lots if irritating superflous parentheses )

#+BEGIN_QUOTE
"Lisp is a programmable programming language."
#+END_QUOTE

[[file:pics/McCarthy.jpg]]

John McCarthy - Invented LISP 1958.

#+BEGIN_QUOTE
"The greatest single programming language ever designed"
-- Alan Kay
#+END_QUOTE

* ( rich Hickey )

[[file:pics/fakerichhickey.jpg]]

https://github.com/tallesl/Rich-Hickey-fanclub

* ( rich hickey Essentials )

** Simple made easy

https://www.youtube.com/watch?v=rI8tNMsozo0

** Hammock-driven development

https://www.youtube.com/watch?v=f84n5oFoZBc

** Are we there yet?

https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey

* ( clojure Philosophy )

#+BEGIN_QUOTE
"It is better to have 100 functions operate on one data structure than 10
functions on 10 data structures."
-- Alan Perlis
#+END_QUOTE

#+BEGIN_QUOTE
"Simplicity is prerequisite for reliability." 
-- Edsger Dijkstra
#+END_QUOTE

#+BEGIN_QUOTE
"SQL, Lisp, and Haskell are the only programming languages that I've seen where
one spends more time thinking than typing."
-- Philip Greenspun
#+END_QUOTE

* ( clojure.tour )

WELP! 

#+BEGIN_SRC clojure
  (defn sum-of-range
    [start end]
    (let [count (inc (- end start))]
      (/ (* (+ start end) count) 2)))

  (defn end-seq "A seq of start values per week"
    [n] (iterate inc n))
  (defn start-seq "A seq of end values per week"
    [n] (iterate (partial + 2) 0))
  (defn start-and-ends "A lazy seq of starts and ends of weeks"
    [n] (map vector (start-seq n) (end-seq n)))

  (defn finance
    [n]
    ;; Calculate the total sum
    (reduce + 0
            ;; Map to the sum of that week
            (map #(apply sum-of-range %)
                 ;; All start-end pairs of n
                 (take (inc n) (start-and-ends n)))))
#+END_SRC

* ( clojure.tour/data-types )

| TYPE       | SAMPLE  |
|------------+---------|
| string     | "foo"   |
| charachter | \f      |
| regex      | #"fo*"  |
| integer    | 42      |
| double     | 3.14159 |
| boolean    | true    |
| nil        | nil     |
| symbol     | foo, +  |
| keyword    | :foo    |

* ( clojure.tour/syntax )

#+BEGIN_SRC clojure

123
;; 123 (doh)

;; An expression is always of the form (fn arg1 arg2 ...)
(inc 2)
;; 3

(println "Hello")
;; <prints 'Hello' to stdout>

(+ 1 1)
;; 2

;; Evaluation order - inner expressions are always evaluated first

(+ 1 (* 4 5))
;; 21
#+END_SRC

* ( clojure.tour/vars )

** Name-spaced binding

#+BEGIN_SRC clojure
(def a-number 123)

a-number
;; 123
#+END_SRC

** Local binding

#+BEGIN_SRC clojure
(let [a 123
      b 567]
  (+ a b))
;; 690
#+END_SRC

* ( clojure.tour/data-types collections )

#+BEGIN_SRC clojure
;; Vector
[1 4 6]

;; List
'(1 4 6)

;; Difference?
(conj [1 4 6] 8)
;; [1 4 6 8]
(conj '(1 4 6) 8)
;; (8 1 4 6)

;; Functions operating on 'seqs'
;; count, concat, cons, take, first, cycle, partition, sort etc.

;; Infinit lazy sequences
(take 5 (cycle [1 2 3]))
;; (1 2 3 1 2)
#+END_SRC

* ( clojure.tour/data-types maps )

#+BEGIN_SRC clojure
 (def record {:album "Blunderbuss"
               :artist "Jack White"
               :released 2013})

  (get record :artist)
  ;; "Jack White"

  (:album record)
  ;; "Blunderbuss"

  (assoc record :tracks 13)
  ;; {:album "Blunderbuss" :artist "Jack White" :released 2013 :tracks 13}

  (update record :released inc)
  ;; {:album "Blunderbuss" :artist "Jack White" :released 2014 :tracks 13}
#+END_SRC

* ( clojure.tour/functions )

#+BEGIN_SRC clojure
  ;; Anonymous function
  (fn [n] (+ 1 n))

  ;; Or - shorter:
  #(+ 1 %)

  ;; Not that useful:
  ((fn [n] #(+ 1 %)) 3)
  ;; 4

  ;; Bind to a symbol
  (def add-one (fn [n] (+ 1 n)))

  (add-one 3)
  ;; 4

  ;; defn
  (defn add-one [n] 
    (+ n 1))

  (add-one 3)
  ;; 4
#+END_SRC

* ( clojure.tour/higher-order-functions )

** Map

#+BEGIN_SRC clojure
(def coll ["a" "bbb" "cccc"])

(map #(count %) coll)
;; (1 3 4)

;; Or shorter
(map count coll)
#+END_SRC

** Filter

#+BEGIN_SRC clojure
  (def coll [1 2 3 4])

  (filter odd? coll)
  ;; (1 3)
#+END_SRC

** Reduce

#+BEGIN_SRC clojure
  (def numbers [1 2 3 4 5])

  (reduce + 0 numbers)
  ;; 15
#+END_SRC

* ( clojure.tour/composing-higher-order-functions )

#+BEGIN_SRC clojure
  (def people [{:age 12 :name "Nisse"}
               {:age 45 :name "Klas"}
               {:age 4 :name "Teo"}
               {:age 21 :name "Micke"}])

  ;; Find names of all underage persons
  (map :name
       (filter #(< (:age %) 18) people))

  ;; Or maybe more readable with the thread-macro
  (->> people
       (filter #(< (:age %) 18))
       (map :name))
  ;; ("Nisse" "Teo")
#+END_SRC

* ( immutability )

#+BEGIN_QUOTE
"Mutable shared state is the root to all evil" 
-- Dale Schumacher
#+END_QUOTE

- "In what state is my object?"
- "When did it change? Who changed it?"
- Add threads: Mayhem!

* ( immutability )

#+BEGIN_SRC clojure
  (def record {:id   12
               :name "Bucket"
               :qty  58})

  record
  ;; => {:id 12, :name "Bucket", :qty 58}

  (assoc record :qty 99)
  ;; => {:id 12, :name "Bucket", :qty 99}

  record
  ;; => {:id 12, :name "Bucket", :qty 58}
#+END_SRC

* ( explicit State in Clojure )

"State means the _value_ of and _identity_ at a point in time."

** Atoms

#+BEGIN_SRC clojure
  (def state (atom 0))

  ;; Dereference an atom
  @state
  ;; 0

  ;; Update a value
  (swap! state inc)
  ;; 1

  @state
  ;; 1
#+END_SRC

Validate an atom

#+BEGIN_SRC clojure
  (def state (atom 1 :validator pos?))

  (swap! state dec)
  ;; IllegalStateException
#+END_SRC

** Refs

#+BEGIN_SRC clojure
  (def count-ref (ref 0))
  (def entries-ref (ref []))

  (dosync
   (alter entries-ref conj "yellow")
   (alter count-ref inc))

  @count-ref
  ;; 1
  @entries-ref
  ;; ["yellow"]
#+END_SRC

* ( code is Data )

** Escape prefix notation

#+BEGIN_SRC clojure
  (+ 1 1)
  ;; 2

  (concat [1 2 3] [4 5 6])
  ;; (1 2 3 4 5 6)

  (defmacro infix
    "Allows you to call a fn with two args as '(arg1 fn arg2)'"
    [infixed] (list (second infixed) (first infixed) (last infixed)))

  (infix (1 + 1))
  ;; 2

  (infix ([1 2 3] concat [4 5 6]))
  ;; (1 2 3 4 5 6)
#+END_SRC

** The thread macro

#+BEGIN_SRC clojure
  (-> 2
      (inc)
      (repeat :a))
  ;; (:a :a :a)

  (source ->)
  ;; (defmacro ->
  ;;   {:added "1.0"}
  ;;   [x & forms]
  ;;   (loop [x x, forms forms]
  ;;     (if forms
  ;;       (let [form (first forms)
  ;;             threaded (if (seq? form)
  ;;                        (with-meta `(~(first form) ~x ~@(next form)) (meta form))
  ;;                        (list form x))]
  ;;         (recur threaded (next forms)))
  ;;       x)))

  (macroexpand '(2 (inc) (repeat :a)))
  ;; (2 (inc) (repeat :a))
#+END_SRC

* ( polymorphism a la Carte )

** Protocols & Records

#+BEGIN_SRC clojure
  (defprotocol Greeter
    (say-hello [this name] "Say hello!"))

  (defrecord Swedish []
    Greeter
    (say-hello [_ n] (format "Hej, %s" n)))

  (defrecord English []
    Greeter
    (say-hello [_ n] (format "Hello, %s" n)))

  (extend-type java.lang.String
    Greeter
    (say-hello [s n] (format "Um, I'm a string (%s).. Hi, %s" s n)))


  (say-hello (->Swedish) "VxoDev")
  ;; => "Hej, VxoDev"
  (say-hello (->English) "VxoDev")
  ;; => "Hello, VxoDev"
  (say-hello "a string" "VxoDev")
  ;; => "Um, I'm a string (a string).. Hi, VxoDev"
#+END_SRC

** Multi-methods

#+BEGIN_SRC clojure
  (defmulti get-a-beer :brand)

  (defmethod get-a-beer "Oppigård"
    [{:keys [qty]}]
    (format "Great choice - here's %d bottles of fine beer!" qty))

  (defmethod get-a-beer "Budweiser"
    [{:keys [qty]}]
    (format "%d bottles of water coming up!" qty))

  (defmethod get-a-beer :default
    [_]
    "All out of that stuff, sorry.")

  (get-a-beer {:brand "Oppigård" :qty 2})
  ;; => "Great choice - here's 2 bottles of fine beer!"
  (get-a-beer {:brand "Budweiser" :qty 3})
  ;; => "3 bottles of water coming up!"
  (get-a-beer {:brand "Heineken" :qty 15})
  ;; => "All out of that stuff, sorry."
#+END_SRC

* ( java Interop )

#+BEGIN_SRC clojure
  ;; Call a static function (java.lang is always available)
  (System/currentTimeMillis)
  ;; 1496866017229

  ;; Create an instance
  (java.util.ArrayList. )

  ;; Add elements to a list, not really useful..
  (.add (java.util.ArrayList.) "elem1")

  ;; Mutating
  (let [list (java.util.ArrayList.)]
    (.add list "elem1")
    (.add list "elem2")
    list) ;; Return the mutated array list

  ;; Better
  (doto (java.util.ArrayList.)
    (.add "elem1")
    (.add "elem2")
    (.add "elem3"))
  ;; ["elem1" "elem2" "elem3"]
#+END_SRC

* ( java Interop )

** () shootout

#+BEGIN_SRC java
public Person createPerson(String name, String location) { // 2
    Person person = new Person(); // 2
    person.setName(name); // 2
    person.setLocation(location); // 2
    return person;
} // and 2 {}
#+END_SRC

#+BEGIN_SRC clojure
(defn create-person [name location] ;; 1
  (doto (Person.) ;; 3
    (.setName name) ;; 2
    (.setLocation location))) ;; 4
#+END_SRC

* ( clojureScript )

[[file:pics/cljs-logo-120b.png]]

https://clojurescript.org/

- Compiles Clojure to Javascript
  
- Sharing data, functions between server and client
  
- React frameworks (Om, Reagent)

* ( clojure Community \hearts )

- Öppet och inkluderande
  - http://www.clojurebridge.org/
    
- Kreativt
  - Quil http://quil.info
  - Overtone http://overtone.github.io
  - Functional Composition: https://www.youtube.com/watch?v=Mfsnlbd-4xQ
    
- Tips : Clojure Remote https://clojureremote.com/

* ( developer Experience )

- The REPL :-)
  
- Gigantiskt ekosystem med bibliotek från Java
  
- Funktionellt - enkelt att resonera och verifiera kod

* ( getting Started )

** IDEs

- Emacs (obviously)
- VIM
- Cursive (IntelliJ)
- Nightcode

** Build tools

- Leiningen
- Boot

** Learning

- Try Clj :: http://www.tryclj.com/
- 4 Clojure :: http://www.4clojure.com/
- Codewars ::  (https://www.codewars.com/)
- Clojure for the Brave and True :: http://www.braveclojure.com/
- Clojure for Java Programmers :: https://www.youtube.com/watch?v=P76Vbsk_3J0
- #vxodev :: Yes indeed :-)

* ( end )

#+BEGIN_QUOTE
"Learn one new language each year."
-- Pragmatic Programmer
#+END_QUOTE

** Learn Clojure in 2017! :-)

