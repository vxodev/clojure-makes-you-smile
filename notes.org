* ( Clojure )

* ( about Me )

(Nästan) examinerad naturgeograf. Bor i Vislanda.

Brinner för systemutveckling och problemlösning. 

- Java (everything.. EJB 1.0, JSTL, JSF, WebWork, Actors)
- Ruby, Scala, Haskell
- Messed around with: Python, Erlang, Javascript, Elm etc.

* ( why Clojure )

Lisp exercerar nya kopplingar i hjärnan. Andra språk är ganska like varandra. Clojure "sticker ut".

Lite som Texas Hold'em - "Takes an hour to learn and a life-time to master"

Framför allt - för mig personligen:

Samma kick jag fick när jag upptäckte Ruby efter ett antal år med Java och C++ - den får jag från Clojure.

Förhoppningsvis kan jag få fler att upptäcka Clojure. 

Det tog mig ett par försök att bli "hooked". Syntaxen skrämde bort mig, och jag var fortfarande fast i OO - kunde inte riktigt släppa det.

Tips: skifta mindset från OO till FP - en bra artikel:

http://steve-yegge.blogspot.se/2006/03/execution-in-kingdom-of-nouns.html

* ( what makes clojure Great? )

Saker som vi ska snacka om.

Saker som jag tycker gör att Clojure särskiljer sig från andra språk.

* ( what is Clojure? )

- Functional
  - Not strict functional like Haskell though.
  - Side-effects are *allowed* (but avoided)
- Dynamically typed language
  - ~clojure.spec~ - contract-driven
- Ägnade 2.5 år åt att värka fram Clojure (med egna medel).
- Nalle Puh: Tänk tänk tänk

* ( LISP - Lots if irritating superflous parentheses )

- "Hittade"?
  - Ursprungligen en matematisk notation för datorer (lambda calculus, Alonso Church)
- Vad särskiljer Lisp från andra språk.
  - Med en liten uppsättning grundfunktioner och datastrukturer så kan man definiera upp resten av språket.
  - First language (well, there was only Fortran before..) with conditionals, first-class functions, recursion, garbage-collection, trees of expressions, read-eval-print loop.
  - Code is data: Enter macros. The abstraction level is Lisp in a much larger portion than in any other language.

* ( rich Hickey )

Mannen bakom Clojure.

Väldigt konsekvent och analytisk. Säger han något om en lösning så har han tänkt igenom den.

* ( rich hickey Essentials )

Fantastiskt många bra videos. Dessa tre speciellt

- Simple Made Easy
  - Uncomplecting things
  - Simple programs work
- Hammock-driven Development
  - *Think* about a problem
  - Agile is nice, but we're solving problems - don't forget to identify and understand the problem.
- Are we there yet
  - About 'accidental complexity', values and time
  - OO vs data-driven FP

* ( clojure Philosophy )

- Simplicity: Meaning - do one thing. Do not complect unrelated things.
- State vs. Values.
- In OO: Everything is a typed class. How do you reuse and compose functions on those types?
  
- Value :: an immutable magnitud
- Identity :: An entity associated with a series of causual related values of time.
- State :: Value of an identity at a moment in time
- Time :: Relative before/after ordering of causal values.

- Everything is oriented around 'data' and functions applied to data
    
* ( clojure.tour )

Looks intimidating!
Scary!

Relax. 

* ( clojure.tour/data-types )

Dina vanliga datatyper. Med vissa undantag - symboler är en dedikerad datatyp.

* ( clojure.tour/syntax )

Basic expressions

Everyting evaluates to something.

Ingen komplicerad operator-precedence - alla uttryck evalueras innifrån och ut.

Konsistent syntax (fast det kan ta en stund att vänja sig vid)

Detta är det enda som krävs för att kunna "parsa" Clojure.

* ( clojure.tour/vars )

Inte "vars" i den egentliga meningen. Det är en namngivning av ett värde - binding.

* ( clojure.tour/data-types collections )

De flesta funktioner returnerar 'lazy' collections. Dvs - de evalueras inte förrän man börjar konsumera dem.

Det finns 'sets' också. Alla collections i Clojure implementerar ett ~ISeq~ protokoll mot vilket i princip alla collection-funktioner är skrivna (få typer - många funktioner)

* ( clojure.tour/data-types maps )

Bread and butter of clojure.

* ( clojure.tour/functions )

Functions are first-class values. So just bind them to a var.

Defn macro - not really a macro, but it behaves as one.

* ( clojure.tour/higher-order-functions )

HOF - tar eller returnerar funktioner.

De vanliga FP-abstraktionerna ( flatMap -> mapcat )

* ( clojure.tour/composing-higher-order-functions )

Hur sitter det ihop? 

* ( immutability )

(Almost) everything in Clojure is a value. (Almost) every data-type is
immutable.

Resource-usage? If nothing is mutated - how can write efficient programs?
Persistent Data Structures -- Structural Sharing.

Sharing data is not a problem anymore! 

Detta förändrar sättet man strukturerar sin lösning. Don't be afraid of the *values*.

Jämför språk där man muterar state - defensiv kodning, locks, protecting data.

* ( explicit State in Clojure )

I Clojure modifierar man inte state för ett "objekt".
Man definierar en _plats_ där global state can uppdateras. Eller rättare sagt - där current state finns.

I Clojure är mutering *explicit* och görs i tydligt deklarerade zoner.

STM - Software Transactional memory

* ( code is Data )

Macros - core feature of Lisps. Jag använder det inte speciellt ofta, men det finns där.

I de flesta andra språk är syntaxen något som är lagt ovanpå själva implementationen. I LISPs är normalt en väldigt stor del av språket implementerat i, well, LISP.

Det ger helt andra möjligheter att anpassa språket till *ditt* behov.

För att t.ex. extenda Ruby eller Java krävs det att man hackar C.

Thanks to the read-eval-print loop (REPL) everything can be changed.

Great for writing DSLs. Great for focusing on the problem domain.

* ( polymorphism a la Carte )

- Protocols and Records
- Multimethods

* ( java Interop )

- Create and interact with Java classes/objects
- Implement interfaces / extend classes
- Interacting with Java from Clojure can actually result in *fewer* parentheses..

* ( clojureScript )

Killer feature. Full stack. Ship libraries for both JVM and Javascript.
Share code. Share data. 

- Growing - recently a Clojurescript compiler in Javascript (no JVM dep).
- I hear it's great! A bunch of frameworks that builds on top of React (Om, Reagent)
- Merges well with Clojure's way to handle state (an atom)
- Compiles Javascript using Googles Closure compiler
  - Effective
- https://clojurescript.org/
- Full stack language. Immutable datastructures all the way.

* ( clojure Community \hearts )

  - Very open community
    - Very inclusive
    - Jobbar hårt för att göra Clojure (och programmering i allmänhet) tillgängligt för så många som möjligt.
    - Speciellt för grupper som är underrepresenterade (ClojureBridge)
  - Creative (Inventing stuff) and a bit artsy
    - Quil and Overtone
    - Check out http://overtone.github.io/ and http://quil.info/
    - Functional Composition : Utforska musikteori med Clojure och Overtone i en live-session (Goldberg Variations)
    - Sees Clojure as a "starting point" for other creative work.
  - Clojure Remote
    
* ( developer Experience )

  - The REPL changes how you develop code.
    - Det känns mer som att bygga med model-lera än med meccano.
    - Våldsamt snabb turn-around.
      - Running unit-tests is snappy!
    - Fun!
    - Starta Clojure-app med remote REPL directly!
      - Gör det möjligt att modifiera kod i runtime (co0l)
      #+BEGIN_SRC 
      -Dclojure.server.repl="{:port 5555 :accept clojure.core.server/repl}"
      #+END_SRC
  - The functional paradigms are clear.
    - Data first -- en annan paradigm än OO
    - Pure functions are worry-free
    - Everything is oriented around 'data' and functions applied to data
      - T.ex. ~HoneySQL~
      - Define SQL queries as Clojure data-types
      - Use standard Clojure functions to compose, merge, and re-use constructs
      - This works out of the box.
      - Ring Middlewares - Web Application Library
        - Operate on a Map containing request, return Map containing response
        - All tools are available to use.
      - Ecosystem for integration with Java libraries is hugh.
      - The same excitement and joy as when discovering Ruby after spending 5 years in Java-land
    
* ( getting Started )

Börja litet - kasta dig inte över en REST-service med databas-access direkt.

Det tar en stund att konfigurera om tankebanorna till Lisp och FP.

Använder du inte Emacs eller VIM redan nu - så börja *inte* lära dig dem
samtidigt som Clojure. Nightcode är ett utmärkt instegsverktyg (kommer med
Leiningen i paketet).

* ( end )

